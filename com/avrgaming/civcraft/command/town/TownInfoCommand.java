/*     */ package com.avrgaming.civcraft.command.town;
/*     */ 
/*     */ import com.avrgaming.civcraft.command.CommandBase;
/*     */ import com.avrgaming.civcraft.components.ConsumeLevelComponent.Result;
/*     */ import com.avrgaming.civcraft.config.CivSettings;
/*     */ import com.avrgaming.civcraft.config.ConfigCultureLevel;
/*     */ import com.avrgaming.civcraft.config.ConfigGovernment;
/*     */ import com.avrgaming.civcraft.config.ConfigHappinessState;
/*     */ import com.avrgaming.civcraft.config.ConfigTownLevel;
/*     */ import com.avrgaming.civcraft.exception.CivException;
/*     */ import com.avrgaming.civcraft.exception.InvalidConfiguration;
/*     */ import com.avrgaming.civcraft.items.BonusGoodie;
/*     */ import com.avrgaming.civcraft.main.CivGlobal;
/*     */ import com.avrgaming.civcraft.main.CivMessage;
/*     */ import com.avrgaming.civcraft.object.AttrSource;
/*     */ import com.avrgaming.civcraft.object.Buff;
/*     */ import com.avrgaming.civcraft.object.BuffManager;
/*     */ import com.avrgaming.civcraft.object.Civilization;
/*     */ import com.avrgaming.civcraft.object.CultureChunk;
/*     */ import com.avrgaming.civcraft.object.DiplomacyManager;
/*     */ import com.avrgaming.civcraft.object.EconObject;
/*     */ import com.avrgaming.civcraft.object.Relation;
/*     */ import com.avrgaming.civcraft.object.Relation.Status;
/*     */ import com.avrgaming.civcraft.object.Resident;
/*     */ import com.avrgaming.civcraft.object.Town;
/*     */ import com.avrgaming.civcraft.object.TradeGood;
/*     */ import com.avrgaming.civcraft.permission.PermissionGroup;
/*     */ import com.avrgaming.civcraft.structure.Bank;
/*     */ import com.avrgaming.civcraft.structure.Buildable;
/*     */ import com.avrgaming.civcraft.structure.Cottage;
/*     */ import com.avrgaming.civcraft.structure.Mine;
/*     */ import com.avrgaming.civcraft.structure.Structure;
/*     */ import com.avrgaming.civcraft.structure.TownHall;
/*     */ import com.avrgaming.civcraft.structure.TradeOutpost;
/*     */ import com.avrgaming.civcraft.structure.wonders.Wonder;
/*     */ import com.avrgaming.civcraft.util.BlockCoord;
/*     */ import com.avrgaming.civcraft.util.CivColor;
/*     */ import java.text.DecimalFormat;
/*     */ import java.util.ArrayList;
/*     */ import java.util.Collection;
/*     */ import java.util.HashMap;
/*     */ import java.util.Iterator;
/*     */ import java.util.LinkedList;
/*     */ import java.util.Map;
/*     */ import org.bukkit.block.Biome;
/*     */ import org.bukkit.command.CommandSender;
/*     */ import org.bukkit.entity.Player;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class TownInfoCommand
/*     */   extends CommandBase
/*     */ {
/*     */   public void init()
/*     */   {
/*  61 */     this.command = "/town info";
/*  62 */     this.displayName = "Town Info";
/*     */     
/*  64 */     this.commands.put("upkeep", "Shows town upkeep information.");
/*  65 */     this.commands.put("cottage", "Shows cottage information for town.");
/*  66 */     this.commands.put("structures", "Shows upkeep information related to structures.");
/*  67 */     this.commands.put("culture", "Shows culture information for town.");
/*  68 */     this.commands.put("trade", "Shows town trade good information.");
/*  69 */     this.commands.put("mine", "Shows mine production information.");
/*  70 */     this.commands.put("hammers", "Shows town hammer information.");
/*  71 */     this.commands.put("goodies", "Shows which goodies are being used by the town.");
/*  72 */     this.commands.put("rates", "Shows the culture,growth,trade and cottage rates of this town.");
/*  73 */     this.commands.put("growth", "Shows growth info about the town.");
/*  74 */     this.commands.put("buffs", "Show all special buffs awarded to this town.");
/*  75 */     this.commands.put("online", "Shows a list of town members that are currently online.");
/*  76 */     this.commands.put("happiness", "Shows information about this town's happiness.");
/*  77 */     this.commands.put("beakers", "Shows information about this town's beakers");
/*  78 */     this.commands.put("area", "Shows the various attributes generated by culture chunks.");
/*  79 */     this.commands.put("disabled", "Shows information about disabled structures.");
/*     */   }
/*     */   
/*     */   public void disabled_cmd() throws CivException {
/*  83 */     Town town = getSelectedTown();
/*     */     
/*  85 */     CivMessage.sendHeading(this.sender, "Disabled Structures");
/*  86 */     LinkedList<String> out = new LinkedList();
/*  87 */     boolean showhelp = false;
/*     */     
/*  89 */     for (Buildable buildable : town.getDisabledBuildables()) {
/*  90 */       showhelp = true;
/*  91 */       out.add("§2" + buildable.getDisplayName() + "§a" + " Coord:" + buildable.getCorner().toString());
/*     */     }
/*     */     
/*  94 */     if (showhelp) {
/*  95 */       out.add("§7These structures have been disabled in this town since they've exceeded the structure limit.");
/*  96 */       out.add("§7To enable them, you must do one of the following:");
/*  97 */       out.add("§71) Move this structure to another town using: /town movestructure <coord>");
/*  98 */       out.add("§72) Demolish this structure with /build demolish <coord> or /build demolishnearest.");
/*  99 */       out.add("§73) Move other structures of the same type to another town, or demolish them, and issue /town enablestructure <coord>");
/*     */     }
/*     */     
/* 102 */     CivMessage.send(this.sender, out);
/*     */   }
/*     */   
/*     */   public void area_cmd() throws CivException {
/* 106 */     Town town = getSelectedTown();
/*     */     
/* 108 */     CivMessage.sendHeading(this.sender, "Area Info");
/* 109 */     HashMap<String, Integer> biomes = new HashMap();
/*     */     
/* 111 */     double hammers = 0.0D;
/* 112 */     double growth = 0.0D;
/* 113 */     double happiness = 0.0D;
/* 114 */     double beakers = 0.0D;
/* 115 */     DecimalFormat df = new DecimalFormat();
/*     */     Integer value;
/* 117 */     for (CultureChunk cc : town.getCultureChunks())
/*     */     {
/* 119 */       if (!biomes.containsKey(cc.getBiome().name())) {
/* 120 */         biomes.put(cc.getBiome().name(), Integer.valueOf(1));
/*     */       } else {
/* 122 */         value = (Integer)biomes.get(cc.getBiome().name());
/* 123 */         biomes.put(cc.getBiome().name(), Integer.valueOf(value.intValue() + 1));
/*     */       }
/*     */       
/* 126 */       hammers += cc.getHammers();
/* 127 */       growth += cc.getGrowth();
/* 128 */       happiness += cc.getHappiness();
/* 129 */       beakers += cc.getBeakers();
/*     */     }
/*     */     
/* 132 */     CivMessage.send(this.sender, "§bBiome Counts");
/* 133 */     String out = "";
/*     */     
/* 135 */     for (String biome : biomes.keySet()) {
/* 136 */       Integer count = (Integer)biomes.get(biome);
/* 137 */       out = out + "§2" + biome + ": " + "§a" + count + "§2" + ", ";
/*     */     }
/*     */     
/* 140 */     CivMessage.send(this.sender, out);
/*     */     
/*     */ 
/*     */ 
/* 144 */     CivMessage.send(this.sender, "§bTotals");
/* 145 */     CivMessage.send(this.sender, "§2 Happiness:§a" + df.format(happiness) + 
/* 146 */       "§2" + " Hammers:" + "§a" + df.format(hammers) + 
/* 147 */       "§2" + " Growth:" + "§a" + df.format(growth) + 
/* 148 */       "§2" + " Beakers:" + "§a" + df.format(beakers));
/*     */   }
/*     */   
/*     */   public void beakers_cmd() throws CivException
/*     */   {
/* 153 */     Town town = getSelectedTown();
/*     */     
/* 155 */     CivMessage.sendHeading(this.sender, "Beakers Info");
/*     */     
/* 157 */     AttrSource beakerSources = town.getBeakers();
/* 158 */     CivMessage.send(this.sender, beakerSources.getSourceDisplayString("§2", "§a"));
/* 159 */     CivMessage.send(this.sender, beakerSources.getRateDisplayString("§2", "§a"));
/* 160 */     CivMessage.send(this.sender, beakerSources.getTotalDisplayString("§2", "§a"));
/*     */   }
/*     */   
/*     */   public void happiness_cmd() throws CivException
/*     */   {
/* 165 */     Town town = getSelectedTown();
/*     */     
/* 167 */     CivMessage.sendHeading(this.sender, "Happiness Info");
/* 168 */     ArrayList<String> out = new ArrayList();
/*     */     
/* 170 */     out.add(CivMessage.buildSmallTitle("Happiness Sources"));
/* 171 */     AttrSource happySources = town.getHappiness();
/*     */     
/* 173 */     DecimalFormat df = new DecimalFormat();
/* 174 */     df.applyPattern("###,###");
/* 175 */     Double value; for (String source : happySources.sources.keySet()) {
/* 176 */       value = (Double)happySources.sources.get(source);
/* 177 */       out.add("§2" + source + ": " + "§a" + df.format(value));
/*     */     }
/* 179 */     out.add("§dTotal: §a" + df.format(happySources.total));
/*     */     
/*     */ 
/* 182 */     out.add(CivMessage.buildSmallTitle("Unhappiness Sources"));
/* 183 */     AttrSource unhappySources = town.getUnhappiness();
/* 184 */     for (String source : unhappySources.sources.keySet()) {
/* 185 */       Double value = (Double)unhappySources.sources.get(source);
/* 186 */       out.add("§2" + source + ": " + "§a" + value);
/*     */     }
/* 188 */     out.add("§dTotal: §a" + df.format(unhappySources.total));
/*     */     
/* 190 */     out.add(CivMessage.buildSmallTitle("Total"));
/* 191 */     ConfigHappinessState state = town.getHappinessState();
/* 192 */     out.add("§a" + df.format(town.getHappinessPercentage() * 100.0D) + "%" + "§2" + " Happiness. State: " + CivColor.valueOf(state.color) + state.name);
/* 193 */     CivMessage.send(this.sender, out);
/*     */   }
/*     */   
/*     */   public void online_cmd()
/*     */     throws CivException
/*     */   {
/* 199 */     Town town = getSelectedTown();
/*     */     
/* 201 */     CivMessage.sendHeading(this.sender, "Online Players In " + town.getName());
/* 202 */     String out = "";
/* 203 */     for (Resident resident : town.getOnlineResidents()) {
/* 204 */       out = out + resident.getName() + " ";
/*     */     }
/* 206 */     CivMessage.send(this.sender, out);
/*     */   }
/*     */   
/*     */   public void buffs_cmd() throws CivException {
/* 210 */     Town town = getSelectedTown();
/*     */     
/* 212 */     CivMessage.sendHeading(this.sender, town.getName() + " Buffs");
/* 213 */     ArrayList<String> out = new ArrayList();
/*     */     
/* 215 */     for (Buff buff : town.getBuffManager().getAllBuffs()) {
/* 216 */       out.add("§2Buff: §a" + buff.getDisplayName() + "§2" + " from " + "§a" + buff.getSource());
/*     */     }
/*     */     
/* 219 */     CivMessage.send(this.sender, out);
/*     */   }
/*     */   
/*     */   public void growth_cmd() throws CivException {
/* 223 */     Town town = getSelectedTown();
/* 224 */     AttrSource growthSources = town.getGrowth();
/*     */     
/* 226 */     CivMessage.sendHeading(this.sender, town.getName() + " Growth");
/* 227 */     CivMessage.send(this.sender, growthSources.getSourceDisplayString("§2", "§a"));
/* 228 */     CivMessage.send(this.sender, growthSources.getRateDisplayString("§2", "§a"));
/* 229 */     CivMessage.send(this.sender, growthSources.getTotalDisplayString("§2", "§a"));
/*     */   }
/*     */   
/*     */   public void goodies_cmd() throws CivException {
/* 233 */     Town town = getSelectedTown();
/* 234 */     CivMessage.sendHeading(this.sender, town.getName() + " Goodies");
/*     */     int j;
/*     */     int i;
/* 237 */     for (Iterator localIterator = town.getBonusGoodies().iterator(); localIterator.hasNext(); 
/*     */         
/*     */ 
/*     */ 
/*     */ 
/* 242 */         i < j)
/*     */     {
/* 237 */       BonusGoodie goodie = (BonusGoodie)localIterator.next();
/* 238 */       CivMessage.send(this.sender, "§a" + goodie.getDisplayName());
/* 239 */       String goodBonuses = goodie.getBonusDisplayString();
/*     */       
/* 241 */       String[] split = goodBonuses.split(";");
/* 242 */       String[] arrayOfString1; j = (arrayOfString1 = split).length;i = 0; continue;String str = arrayOfString1[i];
/* 243 */       CivMessage.send(this.sender, "    §d" + str);i++;
/*     */     }
/*     */   }
/*     */   
/*     */ 
/*     */   public void hammers_cmd()
/*     */     throws CivException
/*     */   {
/* 250 */     Town town = getSelectedTown();
/*     */     
/* 252 */     CivMessage.sendHeading(this.sender, "Hammer Info");
/* 253 */     AttrSource hammerSources = town.getHammers();
/*     */     
/* 255 */     CivMessage.send(this.sender, hammerSources.getSourceDisplayString("§2", "§a"));
/* 256 */     CivMessage.send(this.sender, hammerSources.getRateDisplayString("§2", "§a"));
/* 257 */     CivMessage.send(this.sender, hammerSources.getTotalDisplayString("§2", "§a"));
/*     */   }
/*     */   
/*     */   public void culture_cmd() throws CivException {
/* 261 */     Town town = getSelectedTown();
/* 262 */     AttrSource cultureSources = town.getCulture();
/*     */     
/* 264 */     CivMessage.sendHeading(this.sender, "Culture Info");
/*     */     
/* 266 */     CivMessage.send(this.sender, cultureSources.getSourceDisplayString("§2", "§a"));
/* 267 */     CivMessage.send(this.sender, cultureSources.getRateDisplayString("§2", "§a"));
/* 268 */     CivMessage.send(this.sender, cultureSources.getTotalDisplayString("§2", "§a"));
/*     */   }
/*     */   
/*     */   public void rates_cmd()
/*     */     throws CivException
/*     */   {
/* 274 */     Town town = getSelectedTown();
/*     */     
/* 276 */     CivMessage.sendHeading(this.sender, town.getName() + " Rates Summary");
/*     */     
/* 278 */     CivMessage.send(this.sender, 
/* 279 */       "§2Growth: §a" + town.getGrowthRate().total * 100.0D + 
/* 280 */       "§2" + " Culture: " + "§a" + town.getCulture().total * 100.0D + 
/* 281 */       "§2" + " Cottage: " + "§a" + town.getCottageRate() * 100.0D + 
/* 282 */       "§2" + " Trade: " + "§a" + town.getTradeRate() * 100.0D + 
/* 283 */       "§2" + " Beakers: " + "§a" + town.getBeakerRate().total * 100.0D);
/*     */   }
/*     */   
/*     */   public void trade_cmd()
/*     */     throws CivException
/*     */   {
/* 289 */     Town town = getSelectedTown();
/*     */     
/* 291 */     ArrayList<String> out = new ArrayList();
/* 292 */     CivMessage.sendHeading(this.sender, town.getName() + " Trade Good Summary");
/* 293 */     out.add("§2Trade Mulitplier: §a" + this.df.format(town.getTradeRate()));
/* 294 */     boolean maxedCount = false;
/*     */     try
/*     */     {
/* 297 */       goodMax = CivSettings.getInteger(CivSettings.goodsConfig, "trade_good_multiplier_max").intValue();
/*     */     } catch (InvalidConfiguration e) { int goodMax;
/* 299 */       e.printStackTrace();
/* 300 */       throw new CivException("Invalid configuration error.");
/*     */     }
/*     */     
/*     */     int goodMax;
/* 304 */     if (town.getBonusGoodies().size() > 0) {
/* 305 */       for (BonusGoodie goodie : town.getBonusGoodies()) {
/* 306 */         TradeGood good = goodie.getOutpost().getGood();
/*     */         
/* 308 */         int count = TradeGood.getTradeGoodCount(goodie, town) - 1;
/* 309 */         String countString = count;
/* 310 */         if (count > goodMax) {
/* 311 */           maxedCount = true;
/* 312 */           count = goodMax;
/* 313 */           countString = "§d" + count + "§e";
/*     */         }
/*     */         
/* 316 */         CultureChunk cc = CivGlobal.getCultureChunk(goodie.getOutpost().getCorner().getLocation());
/* 317 */         if (cc == null) {
/* 318 */           out.add("§c" + goodie.getDisplayName() + " - Trade Outpost not inside culture! Goodie cannot be used.");
/*     */         } else {
/* 320 */           out.add("§a" + goodie.getDisplayName() + "(" + goodie.getOutpost().getCorner() + ")" + "§e" + " " + 
/* 321 */             TradeGood.getBaseValue(good) + " * (1.0 + (0.5 * " + countString + ") = " + this.df.format(TradeGood.getTradeGoodValue(goodie, town)));
/*     */         }
/*     */       }
/*     */     } else {
/* 325 */       out.add("§cNo trade goods.");
/*     */     }
/*     */     
/* 328 */     out.add("§b=================================================");
/* 329 */     if (maxedCount) {
/* 330 */       out.add("§dGoods in this color have reached the max good multiplier");
/*     */     }
/* 332 */     out.add("§7Base Value * ( 100% + ( 50% * MIN(ExtraGoods," + goodMax + ") )) = Good Value");
/* 333 */     out.add("§2Total Trade: Good Total: §e" + this.df.format(TradeGood.getTownBaseGoodPaymentViaGoodie(town)) + " * " + this.df.format(town.getTradeRate()) + " = " + 
/* 334 */       this.df.format(TradeGood.getTownTradePayment(town)));
/*     */     
/* 336 */     CivMessage.send(this.sender, out);
/*     */   }
/*     */   
/*     */ 
/*     */   public void showDebugStructureInfo(Town town)
/*     */   {
/* 342 */     CivMessage.sendHeading(this.sender, "Structures In Town");
/* 343 */     for (Structure struct : town.getStructures()) {
/* 344 */       CivMessage.send(this.sender, struct.getDisplayName() + ": Corner:" + struct.getCorner() + " center:" + struct.getCenterLocation());
/*     */     }
/*     */   }
/*     */   
/*     */   public void structures_cmd() throws CivException {
/* 349 */     Town town = getSelectedTown();
/*     */     
/* 351 */     if ((this.args.length > 1) && 
/* 352 */       (this.args[1].equalsIgnoreCase("debug"))) {
/* 353 */       showDebugStructureInfo(town);
/* 354 */       return;
/*     */     }
/*     */     
/*     */ 
/* 358 */     HashMap<String, Double> structsByName = new HashMap();
/* 359 */     for (Structure struct : town.getStructures()) {
/* 360 */       Double upkeep = (Double)structsByName.get(struct.getConfigId());
/* 361 */       if (upkeep == null) {
/* 362 */         structsByName.put(struct.getDisplayName(), Double.valueOf(struct.getUpkeepCost()));
/*     */       } else {
/* 364 */         upkeep = Double.valueOf(upkeep.doubleValue() + struct.getUpkeepCost());
/* 365 */         structsByName.put(struct.getDisplayName(), upkeep);
/*     */       }
/*     */     }
/*     */     
/* 369 */     CivMessage.sendHeading(this.sender, town.getName() + " Structure Info");
/* 370 */     for (String structName : structsByName.keySet()) {
/* 371 */       Double upkeep = (Double)structsByName.get(structName);
/* 372 */       CivMessage.send(this.sender, "§2" + structName + " Upkeep: " + "§a" + upkeep);
/*     */     }
/*     */     
/*     */ 
/* 376 */     CivMessage.sendHeading(this.sender, town.getName() + " Wonder Info");
/* 377 */     for (Wonder wonder : town.getWonders()) {
/* 378 */       CivMessage.send(this.sender, "§2" + wonder.getDisplayName() + " Upkeep: " + "§a" + wonder.getUpkeepCost());
/*     */     }
/*     */   }
/*     */   
/*     */   public void cottage_cmd()
/*     */     throws CivException
/*     */   {
/* 385 */     Town town = getSelectedTown();
/* 386 */     ArrayList<String> out = new ArrayList();
/*     */     
/* 388 */     CivMessage.sendHeading(this.sender, town.getName() + " Cottage Info");
/* 389 */     double total = 0.0D;
/*     */     
/* 391 */     for (Structure struct : town.getStructures()) {
/* 392 */       if (struct.getConfigId().equals("ti_cottage"))
/*     */       {
/*     */ 
/*     */ 
/* 396 */         Cottage cottage = (Cottage)struct;
/*     */         String color;
/*     */         String color;
/* 399 */         if (struct.isActive()) {
/* 400 */           color = "§a";
/*     */         } else {
/* 402 */           color = "§c";
/*     */         }
/*     */         
/* 405 */         double coins = cottage.getCoinsGenerated();
/* 406 */         if (town.getCiv().hasTechnology("tech_taxation")) {
/*     */           try
/*     */           {
/* 409 */             double taxation_bonus = CivSettings.getDouble(CivSettings.techsConfig, "taxation_cottage_buff");
/* 410 */             coins *= taxation_bonus;
/*     */           } catch (InvalidConfiguration e) {
/* 412 */             e.printStackTrace();
/*     */           }
/*     */         }
/*     */         
/* 416 */         if (!struct.isDestroyed()) {
/* 417 */           out.add(color + "Cottage (" + struct.getCorner() + ")");
/* 418 */           out.add("§2    level: §e" + cottage.getLevel() + 
/* 419 */             "§2" + " count: " + "§e" + "(" + cottage.getCount() + "/" + cottage.getMaxCount() + ")");
/* 420 */           out.add("§2    base coins: §e" + coins + 
/* 421 */             "§2" + " Last Result: " + "§e" + cottage.getLastResult().name());
/*     */         } else {
/* 423 */           out.add(color + "Cottage (" + struct.getCorner() + ")");
/* 424 */           out.add("§c    DESTROYED ");
/*     */         }
/*     */         
/* 427 */         total += coins;
/*     */       }
/*     */     }
/* 430 */     out.add("§2----------------------------");
/* 431 */     out.add("§2Sub Total: §e" + total);
/* 432 */     out.add("§2Cottage Rate: §e" + this.df.format(town.getCottageRate() * 100.0D) + "%");
/* 433 */     total *= town.getCottageRate();
/* 434 */     out.add("§2Total: §e" + this.df.format(total) + " coins.");
/*     */     
/* 436 */     CivMessage.send(this.sender, out);
/*     */   }
/*     */   
/*     */   public void mine_cmd() throws CivException
/*     */   {
/* 441 */     Town town = getSelectedTown();
/* 442 */     ArrayList<String> out = new ArrayList();
/*     */     
/* 444 */     CivMessage.sendHeading(this.sender, town.getName() + " Mine Info");
/* 445 */     double total = 0.0D;
/*     */     
/* 447 */     for (Structure struct : town.getStructures()) {
/* 448 */       if (struct.getConfigId().equals("ti_mine"))
/*     */       {
/*     */ 
/*     */ 
/* 452 */         Mine mine = (Mine)struct;
/*     */         String color;
/*     */         String color;
/* 455 */         if (struct.isActive()) {
/* 456 */           color = "§a";
/*     */         } else {
/* 458 */           color = "§c";
/*     */         }
/*     */         
/* 461 */         out.add(color + "Mine (" + struct.getCorner() + ")");
/* 462 */         out.add("§2    level: §e" + mine.getLevel() + 
/* 463 */           "§2" + " count: " + "§e" + "(" + mine.getCount() + "/" + mine.getMaxCount() + ")");
/* 464 */         out.add("§2    hammers per tile: §e" + mine.getHammersPerTile() + 
/* 465 */           "§2" + " Last Result: " + "§e" + mine.getLastResult().name());
/*     */         
/* 467 */         total += mine.getHammersPerTile() * 9.0D;
/*     */       }
/*     */     }
/* 470 */     out.add("§2----------------------------");
/* 471 */     out.add("§2Sub Total: §e" + total);
/* 472 */     out.add("§2Total: §e" + this.df.format(total) + " hammers (estimate).");
/*     */     
/* 474 */     CivMessage.send(this.sender, out);
/*     */   }
/*     */   
/*     */   public void upkeep_cmd() throws CivException {
/* 478 */     Town town = getSelectedTown();
/*     */     
/* 480 */     CivMessage.sendHeading(this.sender, town.getName() + " Upkeep Info");
/* 481 */     CivMessage.send(this.sender, "§2Base Upkeep: §a" + town.getBaseUpkeep());
/*     */     try
/*     */     {
/* 484 */       CivMessage.send(this.sender, "§2Spread Upkeep: §a" + town.getSpreadUpkeep());
/*     */     } catch (InvalidConfiguration e) {
/* 486 */       e.printStackTrace();
/* 487 */       throw new CivException("Internal configuration error.");
/*     */     }
/*     */     
/* 490 */     CivMessage.send(this.sender, "§2Structure Upkeep: §a" + town.getStructureUpkeep());
/*     */     try
/*     */     {
/* 493 */       CivMessage.send(this.sender, "§2SubTotal: §a" + town.getTotalUpkeep() + 
/* 494 */         "§2" + " Upkeep Rate: " + "§a" + town.getGovernment().upkeep_rate);
/*     */     } catch (InvalidConfiguration e) {
/* 496 */       e.printStackTrace();
/* 497 */       throw new CivException("Internal configuration error.");
/*     */     }
/* 499 */     CivMessage.send(this.sender, "§7---------------------------------");
/*     */     try {
/* 501 */       CivMessage.send(this.sender, "§2Total: §a" + town.getTotalUpkeep() * town.getCiv().getGovernment().upkeep_rate);
/*     */     } catch (InvalidConfiguration e) {
/* 503 */       e.printStackTrace();
/* 504 */       throw new CivException("Internal configuration error.");
/*     */     }
/*     */   }
/*     */   
/*     */   public static void show(CommandSender sender, Resident resident, Town town, Civilization civ, CommandBase parent)
/*     */     throws CivException
/*     */   {
/* 511 */     DecimalFormat df = new DecimalFormat();
/* 512 */     boolean isAdmin = false;
/*     */     
/* 514 */     if (resident != null) {
/* 515 */       Player player = CivGlobal.getPlayer(resident);
/* 516 */       isAdmin = player.hasPermission("civ.admin");
/*     */     }
/*     */     else {
/* 519 */       isAdmin = true;
/*     */     }
/*     */     
/* 522 */     CivMessage.sendHeading(sender, town.getName() + " Info ");
/* 523 */     ConfigTownLevel level = (ConfigTownLevel)CivSettings.townLevels.get(Integer.valueOf(town.getLevel()));
/*     */     
/* 525 */     CivMessage.send(sender, "§2Civilization: §a" + town.getCiv().getName());
/* 526 */     CivMessage.send(sender, "§2Town Level: §a" + town.getLevel() + " (" + town.getLevelTitle() + ") " + 
/* 527 */       "§2" + "Score: " + "§a" + town.getScore());
/*     */     
/* 529 */     if (town.getMayorGroup() == null) {
/* 530 */       CivMessage.send(sender, "§2Mayors: §cNONE");
/*     */     } else {
/* 532 */       CivMessage.send(sender, "§2Mayors: §a" + town.getMayorGroup().getMembersString());
/*     */     }
/*     */     
/* 535 */     if (town.getAssistantGroup() == null) {
/* 536 */       CivMessage.send(sender, "§2Assistants: §cNONE");
/*     */     } else
/* 538 */       CivMessage.send(sender, "§2Assistants: §a" + town.getAssistantGroup().getMembersString());
/*     */     ConfigHappinessState state;
/*     */     ConfigCultureLevel clc;
/* 541 */     if ((resident == null) || (civ.hasResident(resident)) || (isAdmin))
/*     */     {
/* 543 */       String color = "§a";
/* 544 */       if (town.getTileImprovementCount() > level.tile_improvements) {
/* 545 */         color = "§c";
/*     */       }
/*     */       
/* 548 */       CivMessage.send(sender, "§2Plots: §a(" + town.getTownChunks().size() + "/" + town.getMaxPlots() + ") " + 
/* 549 */         "§2" + " Tile Improvements: " + "§a" + "(" + color + town.getTileImprovementCount() + "§a" + "/" + level.tile_improvements + ")");
/*     */       
/*     */ 
/*     */ 
/*     */ 
/* 554 */       CivMessage.send(sender, "§2Growth: §a" + df.format(town.getGrowth().total) + " " + 
/* 555 */         "§2" + "Hammers: " + "§a" + df.format(town.getHammers().total) + " " + 
/* 556 */         "§2" + "Beakers: " + "§a" + df.format(town.getBeakers().total));
/*     */       
/*     */ 
/* 559 */       CivMessage.send(sender, "§2Members: §a" + town.getResidentCount() + " " + 
/* 560 */         "§2" + "Tax Rate: " + "§a" + town.getTaxRateString() + " " + 
/* 561 */         "§2" + "Flat Tax: " + "§a" + town.getFlatTax() + " coins.");
/*     */       
/* 563 */       HashMap<String, String> info = new HashMap();
/*     */       
/*     */ 
/*     */ 
/* 567 */       info.put("Happiness", "§a" + df.format(Math.floor(town.getHappinessPercentage() * 100.0D)) + "%");
/* 568 */       state = town.getHappinessState();
/* 569 */       info.put("State", CivColor.valueOf(state.color) + state.name);
/* 570 */       CivMessage.send(sender, parent.makeInfoString(info, "§2", "§a"));
/*     */       
/*     */ 
/* 573 */       clc = (ConfigCultureLevel)CivSettings.cultureLevels.get(Integer.valueOf(town.getCultureLevel()));
/* 574 */       CivMessage.send(sender, "§2Culture: §aLevel: " + clc.level + " (" + town.getAccumulatedCulture() + "/" + clc.amount + ")" + 
/* 575 */         "§2" + " Online: " + "§a" + town.getOnlineResidents().size());
/*     */     }
/*     */     
/*     */ 
/* 579 */     if (town.getBonusGoodies().size() > 0) {
/* 580 */       String goodies = "";
/* 581 */       for (BonusGoodie goodie : town.getBonusGoodies()) {
/* 582 */         goodies = goodies + goodie.getDisplayName() + ",";
/*     */       }
/* 584 */       CivMessage.send(sender, "§2Goodies: §a" + goodies);
/*     */     }
/*     */     
/* 587 */     if ((resident == null) || (town.isInGroup("mayors", resident)) || (town.isInGroup("assistants", resident)) || 
/* 588 */       (civ.getLeaderGroup().hasMember(resident)) || (civ.getAdviserGroup().hasMember(resident)) || (isAdmin)) {
/*     */       try {
/* 590 */         CivMessage.send(sender, "§2Treasury: §a" + town.getBalance() + "§2" + " coins. Upkeep: " + "§a" + town.getTotalUpkeep() * town.getGovernment().upkeep_rate);
/* 591 */         Structure bank = town.getStructureByType("s_bank");
/* 592 */         if (bank != null) {
/* 593 */           CivMessage.send(sender, "§2Interest Rate: §a" + df.format(((Bank)bank).getInterestRate() * 100.0D) + "%" + 
/* 594 */             "§2" + " Principle: " + "§a" + town.getTreasury().getPrincipalAmount());
/*     */         } else {
/* 596 */           CivMessage.send(sender, "§2Interest Rate: §aN/A(No Bank) §2Principal: §aN/A(No Bank)");
/*     */         }
/*     */       }
/*     */       catch (InvalidConfiguration e) {
/* 600 */         e.printStackTrace();
/* 601 */         throw new CivException("Internal configuration error.");
/*     */       }
/*     */     }
/*     */     
/* 605 */     if (town.inDebt()) {
/* 606 */       CivMessage.send(sender, "§2Debt: §e" + town.getDebt() + " coins");
/* 607 */       CivMessage.send(sender, "§eOur town is in debt! Use '/town deposit' to pay it off.");
/*     */     }
/*     */     
/* 610 */     if (town.getMotherCiv() != null) {
/* 611 */       CivMessage.send(sender, "§eWe yearn for our old motherland of §d" + town.getMotherCiv().getName() + "§e" + "!");
/*     */     }
/*     */     
/* 614 */     if (town.hasDisabledStructures()) {
/* 615 */       CivMessage.send(sender, "§cTown has some disabled structures. See /town info disabled.");
/*     */     }
/*     */     
/* 618 */     if (isAdmin) {
/* 619 */       TownHall townhall = town.getTownHall();
/* 620 */       if (townhall == null) {
/* 621 */         CivMessage.send(sender, "§dNO TOWN HALL");
/*     */       } else {
/* 623 */         CivMessage.send(sender, "§dLocation:" + townhall.getCorner());
/*     */       }
/*     */       
/* 626 */       String wars = "";
/* 627 */       for (Relation relation : town.getCiv().getDiplomacyManager().getRelations()) {
/* 628 */         if (relation.getStatus() == Relation.Status.WAR) {
/* 629 */           wars = wars + relation.getOtherCiv().getName() + ", ";
/*     */         }
/*     */       }
/*     */       
/* 633 */       CivMessage.send(sender, "§dWars: " + wars);
/*     */     }
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */   private void show_info()
/*     */     throws CivException
/*     */   {
/* 642 */     Civilization civ = getSenderCiv();
/* 643 */     Town town = getSelectedTown();
/* 644 */     Resident resident = getResident();
/*     */     
/* 646 */     show(this.sender, resident, town, civ, this);
/*     */   }
/*     */   
/*     */   public void doDefaultAction()
/*     */     throws CivException
/*     */   {
/* 652 */     show_info();
/* 653 */     CivMessage.send(this.sender, "§7Subcommands available: See /town info help");
/*     */   }
/*     */   
/*     */   public void showHelp()
/*     */   {
/* 658 */     showBasicHelp();
/*     */   }
/*     */   
/*     */   public void permissionCheck()
/*     */     throws CivException
/*     */   {}
/*     */ }


/* Location:              C:\Users\Adrian\Desktop\CivCraft1.1.jar!\com\avrgaming\civcraft\command\town\TownInfoCommand.class
 * Java compiler version: 7 (51.0)
 * JD-Core Version:       0.7.1
 */